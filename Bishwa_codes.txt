
---DROP PROPERTY_ID
ALTER TABLE HOTEL
DROP COLUMN PROPERTY_ID;

---CHANGE DESCRIPTION
ALTER TABLE HOTEL 
RENAME COLUMN DESCRIPTIO TO DESCRIPTION;


---RETURNS HOTEL_ID FROM HOTEL NAME ( ASSUMES ONE CITY_NAME HAS ONE ID)

CREATE OR REPLACE FUNCTION GET_HOTEL_ID(NAME VARCHAR)
RETURNS INTEGER AS $$

DECLARE 
	H_ID INTEGER;
BEGIN
	SELECT HOTEL_ID INTO H_ID
	FROM HOTEL
	WHERE HOTEL_NAME = NAME;
	RETURN H_ID;
END;
$$ LANGUAGE PLpgSQL;






---TRIGGER FOR PROPERTY THAT WILL CALL HOTEL INSERT ( CAR NOT HANDLED)

CREATE OR REPLACE FUNCTION PROP_INS_HOTEL_INS()
	RETURNS TRIGGER AS $$
BEGIN
     
     IF NEW.PROPERTY_TYPE = 'hotel' THEN
     	INSERT INTO public.hotel(
            hotel_id, hotel_name, description, rating)
    		VALUES (NEW.PROPERTY_ID, 'HASINA', 'BAALER HOTEL', 5);
     
     ELSEIF NEW.PROPERTY_TYPE = 'car_rental' THEN
     	INSERT INTO public.hotel(
            company_id)
    		VALUES (NEW.PROPERTY_ID);
     END IF;
     RETURN NEW;
END
$$ LANGUAGE PLpgSQL

DROP TRIGGER IF EXISTS PROP_INS_HOTEL_INS_TRIG
  ON public.PROPERTY;
CREATE TRIGGER PROP_INS_HOTEL_INS_TRIG
AFTER INSERT 
ON PROPERTY
FOR EACH ROW
EXECUTE PROCEDURE PROP_INS_HOTEL_INS();


---INSERT SOME INFOS
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 7 , 9);
insert into property(property_type , owner_id , city_id) VALUES('car' , 7 , 10);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 8 ,11);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 8 , 12);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 8 , 9);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 8 , 10);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 8 , 11);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 8 , 12);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 9 , 9);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 9 , 10);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 9 , 11);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 9 , 12);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 9 , 9);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 9 , 10);

---RETURNS DESCRIPTION(TEXT) TAKING HOTEL_ID

CREATE OR REPLACE FUNCTION GET_HOTEL_DESCRIPTION(H_ID INTEGER)
RETURNS TEXT AS $$
DECLARE 
	DES TEXT;
BEGIN
	SELECT DESCRIPTION INTO DES 
	FROM  HOTEL 
	WHERE HOTEL_ID = H_ID;
	RETURN DES;
END;
$$ LANGUAGE PLpgSQL;


---RETURNS 

CREATE TABLE ROOM_RESERVE
(
	ROOM_ID INTEGER REFERENCES ROOMS(ROOM_ID),
	RESERVATION_ID INTEGER REFERENCES RESERVATIONS(RESERVATION_ID)
);


INSERT INTO public.reservations(
            reservation_id, hotel_id, checkin_date, checkout_date, client_id, 
            price)
    VALUES (DEFAULT, 23, '2018-07-15','2018-07-29', 2, 
            100);


---RETURNS NUBMERS OF ROOMS OF EACH TYPE FROM A HOTEL 


ALTER TABLE RESERVATIONS
ADD COLUMN ROOM_TYPE TEXT, 
ADD COLUMN QUANTITY INTEGER;

CREATE OR REPLACE FUNCTION GET_ALL_ROOMS_OF_HOTEL(H_ID INTEGER,check_in Date,check_out Date)	
RETURNS TABLE(
     Q_ROOM_TYPE TEXT,
     AVAILABLE_QUANTITY INTEGER
     ) AS $$

DECLARE 

BEGIN 
	RETURN QUERY 
	
	select R.room_type, cast ( count(*) AS INTEGER ) 
	from rooms R 
	where 0 = 
 	(select count(*)
		from ROOM_RESERVE RR join RESERVATIONS res 
		ON (RR.RESERVATION_ID = res.RESERVATION_ID)
		where (RR.ROOM_ID = R.room_ID) and ( ( res.checkin_date >= check_in and check_in <= res.checkout_date ) 
		or ( res.checkout_date >= check_out and check_out <= res.checkout_date ) )
	)
	group by R.room_type;
 	
END;
$$ LANGUAGE PLpgSQL;



---
INSERT INTO public.rooms(
            room_id, hotel_id, room_type, price, facilities, capacity)
    VALUES (default, 26, 'double', 2000, ' ', 2);

---
insert into room_reserve(reservation_id,room_id) values(1,2);