CREATE TABLE owner (
	owner_id	serial PRIMARY KEY,
	name 		text NOT NULL,
	nationality	text NOT NULL,
	email		text NOT NULL,
	password	text NOT NULL
	phone 		text
);

CREATE TABLE city (
	city_id serial PRIMARY KEY,
	city_name text NOT NULL UNIQUE,
	country text NOT NULL,
	number_of_properties INTEGER
);

CREATE TABLE property (
	property_id serial PRIMARY KEY,
	property_type text NOT NULL CHECK ( property_type = 'hotel' or property_type ='car' ),
	owner_id serial references owner(owner_id),
	city_id serial references city(city_id)
);	


	
CREATE TABLE hotel(
	hotel_id serial PRIMARY KEY,
	hotel_name text ,
	description text,
	rating numberic CHECK( rating >= 0 and rating <= 5) 
);


CREATE TABLE rooms (
	room_id serial PRIMARY KEY,
	hotel_id serial references hotel(hotel_id),
	room_type text NOT NULL,
	price integer CHECK (price >= 0) NOT NULL,
	facilities text,
	reservation_id serial references reservations(reservation_id),
	capacity integer CHECK (capacity >=0)
);




CREATE TABLE reservations (
	reservation_id serial PRIMARY KEY,
	hotel_id serial references hotel(hotel_id),
	checkin_date date,
	checkout_date date,
	client_id serial references client(client_id),
	price integer CHECK (price>=0)
);


CREATE OR REPLACE FUNCTION GET_CITY_ID(C_NAME TEXT)
RETURNS INTEGER AS $$
DECLARE
	C_ID INTEGER;
BEGIN
	SELECT city_id INTO C_ID
	FROM CITY
	WHERE C_NAME = city_name;
	RETURN C_ID;
EXCEPTION
	WHEN NO_DATA_FOUND THEN 
		RETURN 'NO CITY FOUND';
	WHEN OTHERS THEN
		RETURN 'OTHERS EXCEPTION IN FUNCTION GET_CITY_ID';
END;
$$ LANGUAGE PLpgSQL;



INSERT INTO city (city_name , country) VALUES('Dhaka' , 'Bangladesh');
INSERT INTO city (city_name , country) VALUES('New York' , 'USA');
INSERT INTO city (city_name , country) VALUES('Delhi' , 'India');
INSERT INTO city (city_name , country) VALUES('Delhi' , 'India');
	


insert into owner(name , nationality , email , phone) VALUES('Mr. Rahim' , 'Bangladeshi' , 'rahim@gmail.com' , '01712345678');
insert into owner(name , nationality , email , phone) VALUES('Mr. karim' , 'Indian' , 'kaim@gmail.com' , '01712345567');
insert into owner(name , nationality , email , phone) VALUES('Edward' , 'American' , 'edward@gmail.com' , '01332345567');


insert into property(property_type , owner_id , city_id) VALUES('hotel' , 3 , 3);
insert into property(property_type , owner_id , city_id) VALUES('car' , 3 , 3);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 2 ,2);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 2 , 4);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 2 , 2);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 2 , 2);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 2 , 2);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 2 , 2);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 1 , 2);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 1 , 4);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 1 , 4);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 1 , 4);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 1 , 4);
insert into property(property_type , owner_id , city_id) VALUES('hotel' , 1 , 4);


insert into hotel(property_id , hotel_name ) values(1 , 'Hotel Carnival');
insert into hotel(property_id , hotel_name ) values(3 , 'Urban Hotel');
insert into hotel(property_id , hotel_name ) values(4 , 'Shornali Garden');
insert into hotel(property_id , hotel_name ) values(6 , 'Heaven Villa');
insert into hotel(property_id , hotel_name ) values(8 , 'Heaven Village');
insert into hotel(property_id , hotel_name ) values(9 , 'Tour Heaven');
insert into hotel(property_id , hotel_name ) values(10 , 'Tropical Heven');
insert into hotel(property_id , hotel_name ) values(11 , 'Hotel Journal');
insert into hotel(property_id , hotel_name ) values(12 , 'Tour de cyclist');
insert into hotel(property_id , hotel_name ) values(13 , 'Padison');
insert into hotel(property_id , hotel_name ) values(14 , 'Water Red');
insert into hotel(property_id , hotel_name ) values(15 , 'HouseWood');
insert into hotel(property_id , hotel_name ) values(16 , 'La La Island');
insert into hotel(property_id , hotel_name ) values(17 , 'SWH Villa');
insert into hotel(property_id , hotel_name ) values(18 , 'Road Run');
insert into hotel(property_id , hotel_name ) values(19 , 'Food Village');





CREATE OR REPLACE FUNCTION hotel_search(city_name text)
RETURNS TABLE(
	HOTEL_NAME TEXT,
	RATING NUMERIC
) AS $$
DECLARE
	C_ID INTEGER;
BEGIN
	C_ID = get_city_id(city_name);
	RETURN QUERY 
	SELECT h.hotel_name , h.rating
	FROM property p 
	JOIN hotel h
	ON(p.city_id = c_id AND h.property_id = p.property_id )
	ORDER BY h.rating desc;
END;
$$ LANGUAGE plpgsql;



update  hotel 
set rating = random()*5 + 1;



update  hotel 
set rating = round(	rating  , 2);



select * from hotel_search('Dhaka');



create table car (
	car_id serial PRIMARY KEY,
	property_id serial references property(property_id),
	description text
);


CREATE TABLE CAR_rental_company_REVIEW(
	REVIEW_ID   int PRIMARY KEY,
	COMPANY_ID    SERIAL REFERENCES CAR_RENTAL_COMPANY(COMPANY_ID),
	CLIENT_ID   SERIAL REFERENCES CLIENT(CLIENT_ID),
	REVIEW_DATE DATE,
	RATING NUMERIC CHECK (RATING >= 0 AND RATING <= 5),
	DESCRIPTION TEXT
);



CREATE TABLE CAR_RENTAL_COMPANY (
	COMPANY_ID INT PRIMARY KEY,
	company_name text NOT NULL,
	description text,
	rating numeric CHECK( rating >= 0 and rating <= 5) 
)

CREATE TABLE HOTEL_REVIEW(
	REVIEW_ID   SERIAL PRIMARY KEY,
	HOTEL_ID    SERIAL REFERENCES HOTEL(HOTEL_ID),
	CLIENT_ID   SERIAL REFERENCES CLIENT(CLIENT_ID),
	REVIEW_DATE DATE,
	RATING INTEGER CHECK (RATING >= 0 AND RATING <= 5),
	DESCRIPTION VARCHAR
);

CREATE TABLE reservation_history (
	roomID INT NOT NULL,
	hotel_id NOT NULL,
	client_id NOT NULL,
	check_in_date date NOT NULL,
	check_out_date NOT NULL,
	price INT NOT NULL,
	history_id serial PRIMARY KEY
)

CREATE TABLE reservation_history (
	roomID INT NOT NULL,
	hotel_id int NOT NULL,
	client_id int NOT NULL,
	check_in_date date NOT NULL,
	check_out_date date NOT NULL,
	price INT NOT NULL,
	history_id serial PRIMARY KEY
)

CREATE OR REPLACE FUNCTION email_safe_to_register(c_email TEXT)
RETURNS bool AS $$
DECLARE
	c_id int;
BEGIN
	c_id = -1;
	SELECT client_id INTO c_id
	FROM client
	WHERE c_email = email;

	if c_id is null then
		return true;
	else return false;
	end if;
END;
$$ LANGUAGE PLpgSQL;



CREATE OR REPLACE FUNCTION update_car_rental_initially(p_id int, p_name text , p_rating numeric , p_description text) RETURNS void AS $$
    DECLARE
		        
    BEGIN
        UPDATE car_rental_company SET company_name = p_name , description = p_description , rating = p_rating
		WHERE company_id = p_id;
    END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION insert_car_rental_company_review(comp_id int , cl_id int , rev_date date , rat numeric , des text) RETURNS void AS $$
    DECLARE
		        
    BEGIN
		insert into car_rental_company_review(company_id , client_id , review_date ,  rating , description) 
		values(comp_id , cl_id , rev_date , rat , des);
    END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION company_rating_update_trigger()
	RETURNS TRIGGER AS $$
DECLARE
	COMP_SUM numeric;
	comp_cnt INT;
	t_row car_rental_company_review%rowtype;
BEGIN
	COMP_SUM := 0;
	comp_cnt := 0;
	FOR t_row in SElECT * FROM car_rental_company_review LOOP
		IF( NEW.company_id = company_id) then
			COMP_SUM := COMP_SUM + rating;
			comp_cnt := comp_cnt + 1;
		end if;
	END LOOP;
	
	if( comp_cnt <> 0) then
		update car_rental_company 
		set rating = COMP_SUM/comp_cnt
		where company_id = NEW.company_id;
	end if;
END;
$$
LANGUAGE plpgsql;
	


DROP TRIGGER IF EXISTS car_rental_company_rating_update_trigger 
ON car_rental_company_review;

CREATE TRIGGER car_rental_company_rating_update_trigger
AFTER INSERT 
ON car_rental_company_review
FOR EACH ROW
EXECUTE PROCEDURE company_rating_update_trigger();


create table car_request(
	company_id serial references car_rental_company(company_id),
	client_id serial references client(client_id),
	hire_date date,
	destination text,
	price int,
	pick_up_location text
)



CREATE OR REPLACE FUNCTION insert_car_request_table(comp_id int , cli_id int ,h_date date , dest text , pr int , pick_up text) RETURNS void AS $$
    DECLARE
		        
    BEGIN
		insert into car_request(company_id , client_id , hire_date ,  destination , price , pick_up_location) 
		values(comp_id , cli_id , h_date , dest , pr , pick_up);
    END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION insert_hotel_review(h_id int , cl_id int , rev_date date , rat numeric , des text) RETURNS void AS $$
    DECLARE
		        
    BEGIN
		insert into hotel_review(hotel_id , client_id , review_date ,  rating , description) 
		values(h_id , cl_id , rev_date , rat , des);
    END;
$$ LANGUAGE plpgsql;





CREATE OR REPLACE FUNCTION insert_hotel_review(h_id int , cl_id int , rev_date date , rat numeric , des text) RETURNS void AS $$
    DECLARE
		        
    BEGIN
		insert into hotel_review(hotel_id , client_id , review_date ,  rating , description) 
		values(h_id , cl_id , rev_date , rat , des);
    END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION hotel_rating_update_trigger()
	RETURNS TRIGGER AS $$
DECLARE
	COMP_SUM numeric;
	comp_cnt INT;
	t_row hotel_review%rowtype;
BEGIN
	COMP_SUM := 0;
	comp_cnt := 0;
	FOR t_row in SElECT * FROM hotel_review LOOP
		IF( NEW.hotel_id = hotel_id) then
			COMP_SUM := COMP_SUM + rating;
			comp_cnt := comp_cnt + 1;
		end if;
	END LOOP;
	
	if( comp_cnt <> 0) then
		update hotel
		set rating = COMP_SUM/comp_cnt
		where hotel_id = NEW.hotel_id;
	end if;
END;
$$
LANGUAGE plpgsql;
	


DROP TRIGGER IF EXISTS hotel_rating_update_trigger 
ON hotel_review;

CREATE TRIGGER hotel_rating_update_trigger
AFTER INSERT 
ON hotel_review
FOR EACH ROW
EXECUTE PROCEDURE hotel_rating_update_trigger();


CREATE OR REPLACE FUNCTION safe_to_login(c_email TEXT , c_pass TEXT)
RETURNS bool AS $$
DECLARE
	c_id int;
BEGIN
	c_id = -1;
	SELECT client_id INTO c_id
	FROM client
	WHERE c_email = email AND MD5(c_pass) = password;

	if c_id is null then
		return false;
	else return true;
	end if;
END;
$$ LANGUAGE PLpgSQL;